service: ecommerce-web
provider:
  name: aws
  runtime: python3.8
  memorySize: 128
  timeout: 300
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "eu-west-1"}
  deploymentBucket: ${self:custom.deployment-bucket.${opt:stage}}
  versionFunctions: false
  logRetentionInDays: 30

  stackTags:
    Component: ${self:service}
    Service: ${self:service}
    BusinessUnit: Ecommerce API
    CostCenter: Ecommerce API
    Scheduled: no
    Scope: protected
    Developer: yadisnel

  tags:
    Component: ${self:provider.stackTags.Component}
    Service: ${self:provider.stackTags.Service}
    BusinessUnit: ${self:provider.stackTags.BusinessUnit}
    CostCenter: ${self:provider.stackTags.CostCenter}
    Scheduled: ${self:provider.stackTags.Scheduled}
    Scope: ${self:provider.stackTags.Scope}
    Developer: ${self:provider.stackTags.Developer}

  parameters:
    service-name: customer

resources:

  Conditions:

    mainRegion:
      Fn::Equals:
        - ${self:provider.region}
        - us-east-1

    devStage:
      Fn::Equals:
        - ${self:provider.stage}
        - dev

    qaStage:
      Fn::Equals:
        - ${self:provider.stage}
        - qa

    prodStage:
      Fn::Equals:
        - ${self:provider.stage}
        - prod

    qaAccount:
      Fn::Or:
        - Fn::Equals:
            - ${self:provider.stage}
            - dev
        - Fn::Equals:
            - ${self:provider.stage}
            - qa

    prodAccount:
      Fn::Or:
        - Fn::Equals:
            - ${self:provider.stage}
            - homo
        - Fn::Equals:
            - ${self:provider.stage}
            - prod

    notProdStage:
      Fn::Not:
        - Fn::Equals:
            - ${self:provider.stage}
            - prod

#  Resources:
#
#    DMJSCipherAppBucket:
#      Type: AWS::S3::Bucket
#      Properties:
#        AccessControl: Private
#        BucketName:
#          Fn::Join:
#            - ''
#            - - Fn::If:
#                  - prodStage
#                  - ''
#                  - ${opt:stage}.
#              - app.
#              - ${ssm:/${opt:stage}/dm-aws-common-resources-jscipher/apex-domain-name}
#        Tags:
#          - Key: BusinessUnit
#            Value: ${self:provider.tags.BusinessUnit}
#          - Key: Service
#            Value: ${self:provider.tags.Service}
#          - Key: Component
#            Value: ${self:provider.tags.Component}
#
#    DMJSCipherAssetsBucketPolicy:
#      Type: AWS::S3::BucketPolicy
#      Properties:
#        Bucket:
#          Ref: DMJSCipherAppBucket
#        PolicyDocument:
#          Statement:
#            - Sid: "Grant a CloudFront Origin Identity access to support private content"
#              Action:
#                - s3:GetObject
#              Effect: Allow
#              Resource:
#                Fn::Join:
#                  - ''
#                  - - Fn::GetAtt:
#                        - DMJSCipherAppBucket
#                        - Arn
#                    - '/*'
#              Principal:
#                CanonicalUser: ${ssm:/${opt:stage}/dm-aws-common-resources-jscipher/cdn-oai-canonical-user-id}
#
#    DMJSCipherAppBucketCDN:
#      Type: AWS::CloudFront::Distribution
#      DependsOn:
#        - DMJSCipherAppBucket
#      Properties:
#        DistributionConfig:
#          HttpVersion: http2
#          Aliases:
#            - Ref: DMJSCipherAppBucket
#          CustomErrorResponses:
#            - ErrorCode: 403
#              ResponsePagePath: "/index.html"
#              ResponseCode: 200
#              ErrorCachingMinTTL: 300
#            - ErrorCode: 404
#              ResponsePagePath: "/index.html"
#              ResponseCode: 200
#              ErrorCachingMinTTL: 300
#          DefaultCacheBehavior:
#            TargetOriginId:
#              Ref: DMJSCipherAppBucket
#            SmoothStreaming: False
#            Compress: True
#            AllowedMethods:
#              - "DELETE"
#              - "GET"
#              - "HEAD"
#              - "OPTIONS"
#              - "PATCH"
#              - "POST"
#              - "PUT"
#            CachedMethods:
#              - "GET"
#              - "HEAD"
#              - "OPTIONS"
#            ForwardedValues:
#              QueryString: True
#              Cookies:
#                Forward: all
#            ViewerProtocolPolicy: redirect-to-https
#            MinTTL: 3600
#          DefaultRootObject: 'index.html'
#          Enabled: True
#          Origins:
#            - DomainName:
#                Fn::GetAtt:
#                  - DMJSCipherAppBucket
#                  - DomainName
#              Id:
#                Ref: DMJSCipherAppBucket
#              S3OriginConfig:
#                OriginAccessIdentity: ${ssm:/${opt:stage}/dm-aws-common-resources-jscipher/cdn-oai-user-id}
#          ViewerCertificate:
#            AcmCertificateArn: ${ssm.us-east-1:/global/dm-aws-common-resources-jscipher/frontend-cdn-cert-arn}
#            MinimumProtocolVersion: "TLSv1.2_2018"
#            SslSupportMethod: sni-only
#        Tags:
#          - Key: Name
#            Value: datamart-jscipher-app-cdn
#          - Key: BusinessUnit
#            Value: ${self:provider.tags.BusinessUnit}
#          - Key: Service
#            Value: ${self:provider.tags.Service}
#          - Key: Component
#            Value: ${self:provider.tags.Component}
#
#    DMJSCipherAppBucketCDNRoute53:
#      Type: AWS::Route53::RecordSet
#      Properties:
#        HostedZoneName:
#          Fn::Join:
#            - ''
#            - - ${ssm:/${opt:stage}/dm-aws-common-resources-jscipher/apex-domain-name}
#              - '.'
#        Name:
#          Ref: DMJSCipherAppBucket
#        ResourceRecords:
#          - Fn::GetAtt:
#              - DMJSCipherAppBucketCDN
#              - DomainName
#        TTL: "300"
#        Type: "CNAME"
#
#    DMJSCipherAppBucketNameParameter:
#      Type: AWS::SSM::Parameter
#      Properties:
#        Description: Datamart JSCipher App Bucket Name
#        Name: /${opt:stage}/${self:service}/app-bucket-name
#        Type: String
#        Value:
#          Ref: DMJSCipherAppBucket
#        Tags:
#          BusinessUnit: ${self:provider.tags.BusinessUnit}
#          Service: ${self:provider.tags.Service}
#          Component: ${self:provider.tags.Component}
